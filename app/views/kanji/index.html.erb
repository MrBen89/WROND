<div class="level-buttons">
  <div class="level-filter level-1">N1</div>
  <div class="level-filter level-2">N2</div>
  <div class="level-filter level-3">N3</div>
  <div class="level-filter level-4 active">N4</div>
  <div class="level-filter level-5">N5</div>
  <div class="level-filter level-all">All!</div>
</div>

<div class="main-container">
  <div class="left-side">
    <div class="info-card">
      <p>Kanji:</p>
      <p><span id="kanji-display">?</span></p>
      <p><strong>Meaning:</strong> <span id="meaning">?</span></p>
      <p><strong>Onyomi:</strong> <span id="onyomi">?</span></p>
      <p><strong>Kunyomi:</strong> <span id="kunyomi">?</span></p>
      <p><strong>Stroke Count:</strong> <span id="stroke-count">?</span></p>
      <p><strong>Grade: N</strong><span id="grade">?</span></p>
      <p><strong>JLPT Level:</strong> <span id="jlpt-level">?</span></p>

      <div class="button-container">
        <button type="button" class="play-button-right" id="play-btn" disabled>Play!</button>
        <input type="hidden" id="selected-kanji" name="selected-kanji">
      </div>
    </div>

    <% @kanji.each do |kanji| %>
      <div class="hidden-kanji-data"
           data-kanji="<%= kanji.kanji %>"
           data-meaning="<%= kanji.meaning %>"
           data-onyomi="<%= kanji.onyomi %>"
           data-kunyomi="<%= kanji.kunyomi %>"
           data-stroke-count="<%= kanji.stroke_count %>"
           data-grade="<%= kanji.grade %>"
           data-jlpt="<%= kanji.jlptLevel %>"
           data-solved="<%= @puzzles.any? {|p| p.kanji == kanji} ? 1 : 0 %>">
      </div>
    <% end %>
  </div>

  <div class="right-side">
    <div class="card-container">
      <% @kanji.each_with_index do |kanji, index| %>
        <div class="card" data-kanji="<%= kanji.kanji %>"
             data-meaning="<%= kanji.meaning %>"
             data-onyomi="<%= kanji.onyomi %>"
             data-kunyomi="<%= kanji.kunyomi %>"
             data-stroke-count="<%= kanji.stroke_count %>"
             data-grade="<%= kanji.grade %>"
             data-jlpt="<%= kanji.jlptLevel %>"
             data-url="<%= kanji_path(kanji) %>"
             data-solved="<%= @puzzles.any? {|p| p.kanji == kanji} ? 1 : 0 %>">

          <div class="stars">★★★☆☆</div>
          <div class="level level-<%= kanji.jlptLevel %>">N<%= kanji.jlptLevel %></div>
          <div class="white-box-for">
            <div class="question-mark">?</div>
          </div>
        </div>
      <% end %>
    </div>
  </div>

</div>

<div class="pagination">
  <button id="prev-page" disabled>Previous</button>
  <button id="next-page">Next</button>
</div>

<style>
.pagination {
  margin-top: 20px;
  text-align: center;
}

.pagination button {
  padding: 10px 20px;
  margin: 5px;
  cursor: pointer;
}

.pagination button:disabled {
  background-color: gray;
  cursor: not-allowed;
}

</style>


<script>
document.addEventListener("DOMContentLoaded", function () {
  const leftSide = document.querySelector(".left-side");
  const rightSide = document.querySelector(".right-side");
  const cards = document.querySelectorAll(".card");
  const playButton = document.getElementById("play-btn");
  const selectedKanjiInput = document.getElementById("selected-kanji");
  const kanjiDisplay = document.getElementById("kanji-display");
  const jlptLevel = document.getElementById("jlpt-level");
  const meaning = document.getElementById("meaning");
  const kunyomi = document.getElementById("kunyomi");
  const onyomi = document.getElementById("onyomi");
  const strokeCount = document.getElementById("stroke-count");
  const grade = document.getElementById("grade");
  const levelFilters = document.querySelectorAll(".level-filter");

  let isExpanded = false;

  // Pagination logic
  const prevButton = document.getElementById("prev-page");
  const nextButton = document.getElementById("next-page");

  const itemsPerPage = 20;
  let currentPage = 1;

  function updatePagination() {
    const filteredCards = Array.from(cards).filter(card => card.style.display !== "none");
    const totalPages = Math.ceil(filteredCards.length / itemsPerPage);

    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;

    filteredCards.forEach((card, index) => {
      if (index >= start && index < end) {
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });

    prevButton.disabled = currentPage === 1;
    nextButton.disabled = currentPage === totalPages;
  }

  nextButton.addEventListener("click", function () {
    currentPage++;
    updatePagination();
  });

  prevButton.addEventListener("click", function () {
    currentPage--;
    updatePagination();
  });

  // Show kanji information when a card is clicked
  cards.forEach((card) => {
    const kanjiData = card.dataset;
    const isSolved = kanjiData.solved >= 1;
    const questionMark = card.querySelector(".question-mark");

    questionMark.textContent = isSolved ? kanjiData.kanji : "?";

    card.addEventListener("click", function () {
      if (!isExpanded) {
        leftSide.classList.add("expanded");
        rightSide.classList.add("shrunk");
        leftSide.style.display = "block";
        isExpanded = true;
      }

      cards.forEach((btn) => btn.classList.remove("active"));
      this.classList.add("active");

      const isSolved = Number(kanjiData.solved) > 0;

      selectedKanjiInput.value = kanjiData.kanji;
      kanjiDisplay.textContent = isSolved ? kanjiData.kanji : "?";
      jlptLevel.textContent = kanjiData.jlpt || "N5";
      meaning.textContent = isSolved ? kanjiData.meaning : "?";
      kunyomi.textContent = isSolved ? kanjiData.kunyomi : "?";
      onyomi.textContent = isSolved ? kanjiData.onyomi : "?";
      strokeCount.textContent = isSolved ? kanjiData.strokeCount : "?";
      grade.textContent = isSolved ? kanjiData.grade : "?";

      playButton.setAttribute("data-url", kanjiData.url);
      playButton.disabled = false;
    });
  });

  playButton.addEventListener("click", function () {
    const url = playButton.getAttribute("data-url");
    if (url) {
      window.location.href = url;
    }
  });

  levelFilters.forEach((filter) => {
    filter.addEventListener("click", function () {
      levelFilters.forEach((filter) => filter.classList.remove("active"));
      this.classList.add("active");

      const selectedLevel = this.classList[1];
      cards.forEach((card) => {
        const cardLevel = card.dataset.jlpt;

        if (selectedLevel === "level-all" || `level-${cardLevel}` === selectedLevel) {
          card.style.display = "block";
        } else {
          card.style.display = "none";
        }
      });

      currentPage = 1; // Reset to first page whenever a filter is applied
      updatePagination(); // Recalculate pagination based on filtered cards
    });
  });

  document.querySelector(".level-5").click(); // Default selection
});

</script>
